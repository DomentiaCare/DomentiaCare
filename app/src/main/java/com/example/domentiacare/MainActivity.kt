package com.example.domentiacare

import android.Manifest
import android.app.AlertDialog
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.activity.viewModels
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.example.domentiacare.data.util.getCallRecordingFiles
import com.example.domentiacare.ui.screen.call.CallLogViewModel
import com.example.domentiacare.service.LocationForegroundService
import com.example.domentiacare.ui.AppNavHost
import com.example.domentiacare.ui.theme.DomentiaCareTheme
import com.example.domentiacare.ui.test.TestLlamaActivity  // Ï∂îÍ∞ÄÎêú import
import dagger.hilt.android.AndroidEntryPoint

@AndroidEntryPoint
class MainActivity : ComponentActivity() {

    private val viewModel: CallLogViewModel by viewModels()
    private val IS_DEV_MODE = true
    private val LOCATION_PERMISSION_REQUEST_CODE = 1001
    private lateinit var finePermissionLauncher: ActivityResultLauncher<String>
    private lateinit var backgroundPermissionLauncher: ActivityResultLauncher<String>

    // üîπ POST_NOTIFICATIONS Í∂åÌïú ÏöîÏ≤≠ Îü∞Ï≤ò
    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        if (isGranted) {
            Log.d("Permission", "‚úÖ ÏïåÎ¶º Í∂åÌïú ÌóàÏö©Îê®")
        } else {
            Toast.makeText(this, "‚ùå ÏïåÎ¶º Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
        }
    }

    // ÌÜµÌôî Í∏∞Î°ù Í∂åÌïú
    private val requestReadCallLog = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) {
            viewModel.loadCallLogs(this)
        } else {
            Toast.makeText(this, "ÌÜµÌôî Í∏∞Î°ù Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // ‚úÖ Android 13 Ïù¥ÏÉÅÏùº Í≤ΩÏö∞ ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            askNotificationPermission()
        }

        // ‚úÖ Ïò§ÎîîÏò§ Í∂åÌïú ÏöîÏ≤≠
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            requestAudioPermission.launch(Manifest.permission.READ_MEDIA_AUDIO)
        } else {
            requestAudioPermission.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
        }

        finePermissionLauncher = registerForActivityResult(
            ActivityResultContracts.RequestPermission()
        ) { isGranted ->
            if (isGranted) {
                Log.d("Permission", "Ï†ïÎ∞Ä ÏúÑÏπò Í∂åÌïú ÌóàÏö©Îê®")
                requestBackgroundLocationPermission()
            } else {
                Toast.makeText(this, "Ï†ïÌôïÌïú ÏúÑÏπò Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()
            }
        }

        backgroundPermissionLauncher = registerForActivityResult(
            ActivityResultContracts.RequestPermission()
        ) { isGranted ->
            if (isGranted) {
                Log.d("Permission", "Î∞±Í∑∏ÎùºÏö¥Îìú ÏúÑÏπò Í∂åÌïú ÌóàÏö©Îê®")
                startLocationService()
            } else {
                Toast.makeText(this, "Î∞±Í∑∏ÎùºÏö¥Îìú ÏúÑÏπò Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show()
            }
        }

        if (hasFineLocationPermission()) {
            if (hasBackgroundLocationPermission()) {
                startLocationService()
            } else {
                requestBackgroundLocationPermission()
            }
        } else {
            requestFineLocationPermission()
        }

        enableEdgeToEdge()
        setContent {
            DomentiaCareTheme {
                if (IS_DEV_MODE) {
                    // üÜï Í∞úÎ∞ú Î™®ÎìúÏùº Îïå Î©îÏù∏ Ïª®ÌÖêÏ∏† ÏúÑÏóê LLaMA ÌÖåÏä§Ìä∏ Î≤ÑÌäº Ï∂îÍ∞Ä
                    Column(
                        modifier = Modifier.fillMaxSize()
                    ) {
                        // LLaMA ÌÖåÏä§Ìä∏ Î≤ÑÌäºÏùÑ ÏÉÅÎã®Ïóê Í≥†Ï†ï
                        LlamaTestButton()

                        // Í∏∞Ï°¥ Ïï± ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
                        Box(modifier = Modifier.weight(1f)) {
                            AppNavHost()
                        }
                    }
                } else {
                    // Ï†ïÏãù Î¶¥Î¶¨Ï¶àÏóêÏÑúÎäî Í∏∞Ï°¥ UIÎßå ÌëúÏãú
                    AppNavHost()
                }
            }
        }
    }

    // üÜï LLaMA ÌÖåÏä§Ìä∏ Î≤ÑÌäº Ïª¥Ìè¨ÎÑåÌä∏
    @Composable
    private fun LlamaTestButton() {
        Card(
            modifier = Modifier
                .fillMaxWidth()
                .padding(8.dp),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer
            )
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(12.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "ü§ñ LLaMA Test",
                        style = MaterialTheme.typography.titleSmall
                    )
                    Text(
                        text = "ChatApp Ïó∞Îèô ÌÖåÏä§Ìä∏",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }

                Button(
                    onClick = {
                        Log.d("MainActivity", "Opening LLaMA test activity")
                        startActivity(Intent(this@MainActivity, TestLlamaActivity::class.java))
                    },
                    modifier = Modifier.padding(start = 8.dp)
                ) {
                    Text("Test")
                }
            }
        }
    }

    // Í∏∞Ï°¥ Î©îÏÑúÎìúÎì§ÏùÄ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ...

    private val requestAudioPermission = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (isGranted) {
            Log.d("Permission", "üéôÔ∏è Ïò§ÎîîÏò§ ÌååÏùº Ï†ëÍ∑º Í∂åÌïú ÌóàÏö©Îê®")
            // Ïó¨Í∏∞Ïóê ÎÖπÏùå ÌååÏùº Í∞ÄÏ†∏Ïò§Îäî ÏΩîÎìú Ìò∏Ï∂ú Í∞ÄÎä•
        } else {
            Toast.makeText(this, "ÎÖπÏùå ÌååÏùº Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun hasFineLocationPermission(): Boolean {
        return ActivityCompat.checkSelfPermission(
            this, Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }

    private fun hasBackgroundLocationPermission(): Boolean {
        return ActivityCompat.checkSelfPermission(
            this, Manifest.permission.ACCESS_BACKGROUND_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }

    private fun requestFineLocationPermission() {
        finePermissionLauncher.launch(Manifest.permission.ACCESS_FINE_LOCATION)
    }

    private fun requestBackgroundLocationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            backgroundPermissionLauncher.launch(Manifest.permission.ACCESS_BACKGROUND_LOCATION)
        } else {
            startLocationService() // Q Ïù¥ÌïòÏóêÏÑúÎäî Î∞±Í∑∏ÎùºÏö¥Îìú Í∂åÌïú ÌïÑÏöî ÏóÜÏùå
        }
    }

    private fun startLocationService() {
        val intent = Intent(this, LocationForegroundService::class.java)
        ContextCompat.startForegroundService(this, intent)
    }

    private fun askNotificationPermission() {
        // Ïù¥ÎØ∏ Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS)
            == PackageManager.PERMISSION_GRANTED
        ) {
            Log.d("Permission", "üì¢ ÏïåÎ¶º Í∂åÌïú Ïù¥ÎØ∏ ÌóàÏö©Îê®")
        }
        // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í∂åÌïú ÏöîÏ≤≠ ÏÇ¨Ïú† ÏÑ§Î™ÖÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞
        else if (shouldShowRequestPermissionRationale(Manifest.permission.POST_NOTIFICATIONS)) {
            // ÏÑ§Î™Ö Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÎùÑÏö¥ ÌõÑ ‚Üí OK ÎàÑÎ•¥Î©¥ requestPermissionLauncher.launch(...) Ìò∏Ï∂ú
            AlertDialog.Builder(this)
                .setTitle("ÏïåÎ¶º Í∂åÌïú ÌïÑÏöî")
                .setMessage("ÏúÑÏπò Ïù¥ÌÉà ÏïåÎ¶ºÏùÑ ÏàòÏã†ÌïòÎ†§Î©¥ ÏïåÎ¶º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
                .setPositiveButton("ÌóàÏö©") { _, _ ->
                    requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                }
                .setNegativeButton("Í±∞Î∂Ä", null)
                .show()
        }
        // ÏÑ§Î™Ö ÏóÜÏù¥ Î∞îÎ°ú ÏöîÏ≤≠
        else {
            requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
        }
    }
}