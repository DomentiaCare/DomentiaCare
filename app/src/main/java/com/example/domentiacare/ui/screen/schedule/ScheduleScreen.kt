/*
package com.example.domentiacare.ui.screen.schedule

import android.util.Log
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Notifications
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.domentiacare.ScheduleNotificationData
import com.example.domentiacare.data.isOnline
import com.example.domentiacare.data.local.SimpleLocalStorage
import com.example.domentiacare.data.local.SimpleSchedule
import com.example.domentiacare.data.local.schedule.Schedule
import com.kizitonwose.calendar.compose.weekcalendar.rememberWeekCalendarState
import java.time.DayOfWeek
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime
import java.time.format.DateTimeFormatter
import java.util.Locale


@Composable
fun ScheduleScreen(
    navController: NavController,
    viewModel: ScheduleViewModel,
    notificationData: ScheduleNotificationData? = null // üÜï ÏïåÎ¶º Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
) {
    Log.d("ScheduleScreen", "ÌôîÎ©¥ ÏãúÏûëÎê®")

    val today = LocalDate.now()
    val schedules = viewModel.schedules
    var selectedDate by remember { mutableStateOf(today) }
    val state = rememberWeekCalendarState(
        startDate = today.minusMonths(1),
        endDate = today.plusMonths(1),
        firstVisibleWeekDate = today,
        firstDayOfWeek = DayOfWeek.SUNDAY
    )
    val context = LocalContext.current
    val localStorage = remember { SimpleLocalStorage(context) }
    var loadedSchedule by remember { mutableStateOf<SimpleSchedule?>(null) }
    // ÏΩîÎ£®Ìã¥ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
    LaunchedEffect(Unit) {
        loadedSchedule = localStorage.getOverwrittenSchedule()
    }

    Box(modifier = Modifier.fillMaxSize()) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(0.dp)
    ) {
        loadedSchedule?.let { data ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Icon(
                            Icons.Default.Notifications,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "ÏûêÎèô Îì±Î°ùÎêú ÏùºÏ†ï",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    // ÏùºÏ†ï Ï†ïÎ≥¥ ÌëúÏãú
                    data.title?.let {
                        InfoRow(label = "Ï†úÎ™©", value = it)
                    }

                    data.startDate?.let { startDate ->

                        val parts = startDate.split("T")
                        val datePart = parts.getOrNull(0) ?: ""
                        InfoRow(label = "ÎÇ†Ïßú", value = datePart)
                    }

                    data.startDate?.let { startDate ->
                        val parts = startDate.split("T")
                        val timePart = parts.getOrNull(1)?.replace("Z", "") ?: ""
                        val formattedTime = timePart.substring(0, 2) + ":" + timePart.substring(2, 4)

                        InfoRow(label = "ÏãúÍ∞Ñ", value = formattedTime)
                    }

                    data.description?.let {
                        InfoRow(label = "ÏÑ§Î™Ö", value = it)
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Ïï°ÏÖò Î≤ÑÌäºÎì§
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Button(
                            onClick = {
                                // ÏùºÏ†ï ÏàòÏ†ï Î°úÏßÅ
                                Log.d("ScheduleScreen", "ÏùºÏ†ï ÏàòÏ†ï ÌÅ¥Î¶≠")
                                val schedule = convertSimpleToRoomSchedule(data)
                                viewModel.addSchedule(schedule ,isOnline(context))
                                localStorage.clearOverwrittenSchedule()
                                loadedSchedule = null
                            },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("Ï†ÄÏû•")
                        }

                        OutlinedButton(
                            onClick = {
                                // ÏùºÏ†ï ÌôïÏù∏ Î°úÏßÅ
                                // ÏùºÏ†ï ÌôîÎ©¥ÏúºÎ°ú ÎÑòÏñ¥Í∞ÄÏïºÌï®
                                Log.d("ScheduleScreen", "ÏùºÏ†ï Ï∑®ÏÜå ÌÅ¥Î¶≠")
                                localStorage.clearOverwrittenSchedule()
                                loadedSchedule = null

                            },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("Ï∑®ÏÜå")
                        }
                    }

                }
            }
        }
        // üÜï ÏïåÎ¶ºÏóêÏÑú Ïò® Í≤ΩÏö∞ ÏÉÅÎã®Ïóê ÌäπÎ≥ÑÌïú Ïπ¥Îìú ÌëúÏãú
        */
/*notificationData?.let { data ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.primaryContainer
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Icon(
                            Icons.Default.Notifications,
                            contentDescription = null,
                            tint = MaterialTheme.colorScheme.primary,
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "ÏûêÎèô Îì±Î°ùÎêú ÏùºÏ†ï",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = MaterialTheme.colorScheme.primary
                        )
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    // ÏùºÏ†ï Ï†ïÎ≥¥ ÌëúÏãú
                    data.summary?.let {
                        InfoRow(label = "Ï†úÎ™©", value = it)
                    }

                    data.date?.let {
                        InfoRow(label = "ÎÇ†Ïßú", value = it)
                    }

                    data.time?.let {
                        InfoRow(label = "ÏãúÍ∞Ñ", value = it)
                    }

                    data.place?.let {
                        InfoRow(label = "Ïû•ÏÜå", value = it)
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Ïï°ÏÖò Î≤ÑÌäºÎì§
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        Button(
                            onClick = {
                                // ÏùºÏ†ï ÏàòÏ†ï Î°úÏßÅ
                                Log.d("ScheduleScreen", "ÏùºÏ†ï ÏàòÏ†ï ÌÅ¥Î¶≠")
                            },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("ÏàòÏ†ïÌïòÍ∏∞")
                        }

                        OutlinedButton(
                            onClick = {
                                // ÏùºÏ†ï ÌôïÏù∏ Î°úÏßÅ
                                // ÏùºÏ†ï ÌôîÎ©¥ÏúºÎ°ú ÎÑòÏñ¥Í∞ÄÏïºÌï®
                                Log.d("ScheduleScreen", "ÏùºÏ†ï ÌôïÏù∏ ÌÅ¥Î¶≠")
                            },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text("ÌôïÏù∏")
                        }
                    }

                }
            }
        }*//*


        // Í∏∞Ï°¥ Ï∫òÎ¶∞Îçî UI
        // ÏÉàÎ°úÏö¥ ÏΩîÎìú (Ï∂îÍ∞Ä):
        HorizontalCalendarComponent(
            selectedDate = selectedDate,
            onDateSelected = {
                selectedDate = it
                println("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: $it")
                navController.navigate("scheduleDetail/${it}")
            },
            schedules = schedules
        )
    }
        // Ïò§Î•∏Ï™Ω ÌïòÎã®Ïóê FAB Ï∂îÍ∞Ä
        FloatingActionButton(
            onClick = { navController.navigate("addSchedule/${today}") { launchSingleTop = true } },
            modifier = Modifier
                .align(Alignment.BottomEnd)
                .padding(16.dp)
        ) {
            Icon(Icons.Default.Add, contentDescription = "ÏùºÏ†ï Ï∂îÍ∞Ä")
        }
}
}

// üÜï Ï†ïÎ≥¥ ÌëúÏãúÏö© Ìó¨Ìçº Ïª¥Ìè¨ÎÑåÌä∏
@Composable
private fun InfoRow(label: String, value: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = "$label:",
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Medium,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onSurface
        )
    }
}

fun convertSimpleToRoomSchedule(simple: SimpleSchedule): Schedule {
    return Schedule(
        title = simple.title,
        description = simple.description,
        startDate = convertToIsoDateTime(simple.startDate),
        endDate = convertToIsoDateTime(simple.endDate),
        isAi = true,
        recordName = simple.file_name // ÎòêÎäî Îã§Î•∏ Ï†ÅÏ†àÌïú ÏùòÎØ∏Î°ú Îß§Ìïë
    )
}


fun convertToIsoDateTime(raw: String): String {
    // 1. ÏöîÏùºÍ≥º ÏãúÍ∞Ñ Î∂ÑÎ¶¨
    val parts = raw.split("T")
    val dayOfWeekStr = parts.getOrNull(0) ?: return ""
    val timePartRaw = parts.getOrNull(1)?.replace("Z", "") ?: return ""

    // 2. ÏãúÍ∞Ñ ÌååÏã± (ex: 1230:00.000 ‚Üí 12:30)
    val hour = timePartRaw.substring(0, 2).toIntOrNull() ?: 0
    val minute = timePartRaw.substring(2, 4).toIntOrNull() ?: 0

    // 3. ÏöîÏùº Îß§Ìïë
    val dayOfWeek = when (dayOfWeekStr.lowercase(Locale.getDefault())) {
        "monday" -> DayOfWeek.MONDAY
        "tuesday" -> DayOfWeek.TUESDAY
        "wednesday" -> DayOfWeek.WEDNESDAY
        "thursday" -> DayOfWeek.THURSDAY
        "friday" -> DayOfWeek.FRIDAY
        "saturday" -> DayOfWeek.SATURDAY
        "sunday" -> DayOfWeek.SUNDAY
        else -> return ""
    }

    // 4. Ïò§Îäò ÎÇ†Ïßú Í∏∞Ï§ÄÏúºÎ°ú Í∞ÄÏû• Í∞ÄÍπåÏö¥ Ìï¥Îãπ ÏöîÏùº Íµ¨ÌïòÍ∏∞
    val today = LocalDate.now()
    val todayDayOfWeek = today.dayOfWeek
    val daysUntilTarget = (dayOfWeek.value - todayDayOfWeek.value + 7) % 7
    val targetDate = today.plusDays(daysUntilTarget.toLong())

    // 5. ÏµúÏ¢Ö ISO ÌòïÏãù Ï°∞Ìï©
    val resultDateTime = LocalDateTime.of(targetDate, LocalTime.of(hour, minute))
    return resultDateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) // "2025-05-30T12:30:00"
}
*/
