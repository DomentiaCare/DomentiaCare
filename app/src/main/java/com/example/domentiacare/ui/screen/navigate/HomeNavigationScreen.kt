package com.example.domentiacare.ui.screen.navigation

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.location.Location
import android.net.Uri
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.ContextCompat
import androidx.core.text.isDigitsOnly
import androidx.navigation.NavController
import com.example.domentiacare.R
import com.example.domentiacare.data.local.CurrentUser
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.model.*
import com.google.maps.android.compose.*

@Composable
fun HomeNavigationScreen(navController: NavController,
                         flag: String? = null) {
    val context = LocalContext.current
    val currentUser = CurrentUser.user

    // Í∏∞Î≥∏ Ïßë Ï£ºÏÜå (Ïã§Ï†úÎ°úÎäî ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ïÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
    val homeAddress = "ÏÑúÏö∏ÌäπÎ≥ÑÏãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123"
    val homeLatLng = remember { mutableStateOf(LatLng(37.5666102, 126.9783881)) } // Í∏∞Î≥∏ Ïßë ÏúÑÏπò
    val userLatLng = remember { mutableStateOf<LatLng?>(null) }
    val isLoading = remember { mutableStateOf(true) }
    val isLocationPermissionGranted = remember { mutableStateOf(false) }
    val isMapReady = remember { mutableStateOf(false) }

    // ÏßÄÎèÑ Ïπ¥Î©îÎùº ÏÉÅÌÉú
    val cameraPositionState = rememberCameraPositionState {
        position = CameraPosition.fromLatLngZoom(homeLatLng.value, 15f)
    }

    val homeMarkerState = rememberMarkerState(position = homeLatLng.value)
    val userMarkerState = remember { mutableStateOf<MarkerState?>(null) }

    // ÏúÑÏπò ÏÑúÎπÑÏä§ ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏
    val fusedLocationClient = remember { LocationServices.getFusedLocationProviderClient(context) }

    // ÎßàÏª§ ÏïÑÏù¥ÏΩò
    val homeIcon = remember { mutableStateOf<BitmapDescriptor?>(null) }
    val userIcon = remember { mutableStateOf<BitmapDescriptor?>(null) }

    // ÏúÑÏπò Í∂åÌïú Îü∞Ï≤ò
    val locationPermissionLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val fineLocationGranted = permissions[Manifest.permission.ACCESS_FINE_LOCATION] ?: false
        val coarseLocationGranted = permissions[Manifest.permission.ACCESS_COARSE_LOCATION] ?: false

        if (fineLocationGranted || coarseLocationGranted) {
            isLocationPermissionGranted.value = true
            getCurrentUserLocation(fusedLocationClient, context) { location ->
                userLatLng.value = LatLng(location.latitude, location.longitude)
                userMarkerState.value = MarkerState(position = LatLng(location.latitude, location.longitude))

                // ÏßÄÎèÑÍ∞Ä Ï§ÄÎπÑÎêòÏóàÏùÑ ÎïåÎßå Ïπ¥Î©îÎùº Ïù¥Îèô
                if (isMapReady.value) {
                    updateCameraToShowBothLocations(cameraPositionState, userLatLng.value!!, homeLatLng.value)
                }

                isLoading.value = false
            }
        } else {
            isLoading.value = false
            Toast.makeText(context, "ÏúÑÏπò Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_LONG).show()
        }
    }

    // Ï¥àÍ∏∞Ìôî
    LaunchedEffect(Unit) {

        // ÏúÑÏπò Í∂åÌïú ÌôïÏù∏
        val fineLocationPermission = ContextCompat.checkSelfPermission(
            context, Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED

        val coarseLocationPermission = ContextCompat.checkSelfPermission(
            context, Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED

        if (fineLocationPermission || coarseLocationPermission) {
            isLocationPermissionGranted.value = true
            getCurrentUserLocation(fusedLocationClient, context) { location ->
                userLatLng.value = LatLng(location.latitude, location.longitude)
                userMarkerState.value = MarkerState(position = LatLng(location.latitude, location.longitude))

                // ÏßÄÎèÑÍ∞Ä Ï§ÄÎπÑÎêòÏóàÏùÑ ÎïåÎßå Ïπ¥Î©îÎùº Ïù¥Îèô
                if (isMapReady.value) {
                    updateCameraToShowBothLocations(cameraPositionState, userLatLng.value!!, homeLatLng.value)
                }

                isLoading.value = false
            }
        } else {
            locationPermissionLauncher.launch(
                arrayOf(
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION
                )
            )
        }
    }

    LaunchedEffect(Unit) {
        Log.d("HomeNavigationScreen", "LaunchedEffect ÏßÑÏûÖ")

        when {
            flag == null -> {
                Log.d("Navigation", "null Í∞í")
                // null Ï≤òÎ¶¨
            }
            flag == "home" -> {
                // üéØ ÏûêÎèô Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ
                // ÏÇ¨Ïö©Ïûê ÏúÑÏπòÍ∞Ä ÌôïÏù∏Îê† ÎïåÍπåÏßÄ Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïã§Ìñâ
                kotlinx.coroutines.delay(2000) // 2Ï¥à ÎåÄÍ∏∞ (ÏúÑÏπò Ï†ïÎ≥¥ Î°úÎî© ÏãúÍ∞Ñ)

                // ÌòÑÏû¨ ÏúÑÏπòÏôÄ Ïßë ÏúÑÏπò Ï†ïÎ≥¥Î°ú ÏûêÎèô Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ
                val currentUserLocation = userLatLng.value
                val homeLocation = homeLatLng.value

                if (currentUserLocation != null) {
                    Log.d("HomeNavigationScreen", "ÏûêÎèô Íµ¨Í∏Ä Îßµ Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ")
                    Log.d("HomeNavigationScreen", "Ï∂úÎ∞úÏßÄ: ${currentUserLocation.latitude}, ${currentUserLocation.longitude}")
                    Log.d("HomeNavigationScreen", "Î™©Ï†ÅÏßÄ: ${homeLocation.latitude}, ${homeLocation.longitude}")

                    // Íµ¨Í∏Ä Îßµ Í∏∏Ï∞æÍ∏∞ ÏûêÎèô Ïã§Ìñâ
                    openGoogleMapsNavigation(
                        context = context,
                        startLat = currentUserLocation.latitude,
                        startLng = currentUserLocation.longitude,
                        endLat = homeLocation.latitude,
                        endLng = homeLocation.longitude,
                        destinationName = "Ïßë"
                    )
                } else {
                    Log.w("HomeNavigationScreen", "ÏÇ¨Ïö©Ïûê ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ ÏûêÎèô Í∏∏Ï∞æÍ∏∞Î•º Ïã§ÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§")
                    // Í∏∞Î≥∏ ÏúÑÏπò(ÏÑúÏö∏ ÏãúÏ≤≠)ÏóêÏÑú ÏßëÏúºÎ°ú Í∏∏Ï∞æÍ∏∞
                    val defaultLocation = LatLng(37.5665, 126.9780) // ÏÑúÏö∏ ÏãúÏ≤≠

                    Log.d("HomeNavigationScreen", "Í∏∞Î≥∏ ÏúÑÏπòÏóêÏÑú ÏßëÏúºÎ°ú Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ")
                    openGoogleMapsNavigation(
                        context = context,
                        startLat = defaultLocation.latitude,
                        startLng = defaultLocation.longitude,
                        endLat = homeLocation.latitude,
                        endLng = homeLocation.longitude,
                        destinationName = "Ïßë"
                    )
                }
            }
            flag.isDigitsOnly() -> { // ÌôòÏûê ID Î∞õÎäî Í≥≥
                // Ïà´ÏûêÏù∏ÏßÄ ÌôïÏù∏
                val number = flag.toIntOrNull()
                Log.d("Navigation", "Ïà´Ïûê Í∞í: $number")
                // ÌôòÏûê IDÎ°ú ÌôòÏûê ÏúÑÏπò

            }
            else -> {
                Log.d("Navigation", "Î¨∏ÏûêÏó¥ Í∞í: $flag")

            }
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFFFFF4E6),
                        Color(0xFFFFFFFF)
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // ÏÉÅÎã® Ìó§Îçî
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(4.dp, RoundedCornerShape(bottomStart = 16.dp, bottomEnd = 16.dp)),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(bottomStart = 16.dp, bottomEnd = 16.dp)
            ) {
                Column(
                    modifier = Modifier.padding(20.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        IconButton(
                            onClick = { navController.popBackStack() },
                            modifier = Modifier
                                .background(
                                    Color(0xFFF5F5F5),
                                    RoundedCornerShape(12.dp)
                                )
                                .size(48.dp)
                        ) {
                            Icon(
                                Icons.Default.ArrowBack,
                                contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞",
                                tint = Color(0xFF2D2D2D)
                            )
                        }

                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            Icon(
                                Icons.Default.Home,
                                contentDescription = "Ïßë",
                                tint = Color(0xFFF49000),
                                modifier = Modifier.size(32.dp)
                            )
                            Text(
                                "ÏßëÏúºÎ°ú Í∞ÄÍ∏∞",
                                style = MaterialTheme.typography.headlineSmall,
                                fontWeight = FontWeight.Bold,
                                color = Color(0xFF2D2D2D)
                            )
                        }

                        // Í≥µÍ∞Ñ ÎßûÏ∂îÍ∏∞Ïö© Îπà Î∞ïÏä§
                        Box(modifier = Modifier.size(48.dp))
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        "${currentUser?.nickname ?: "ÏÇ¨Ïö©Ïûê"}Îãò, ÏïàÏ†ÑÌïòÍ≤å ÏßëÏúºÎ°ú Í∞ÄÏÑ∏Ïöî",
                        style = MaterialTheme.typography.bodyLarge,
                        color = Color(0xFF757575),
                        textAlign = TextAlign.Center
                    )
                }
            }

            // ÏßÄÎèÑ ÏòÅÏó≠
            if (isLoading.value) {
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f),
                    contentAlignment = Alignment.Center
                ) {
                    Column(
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        CircularProgressIndicator(
                            color = Color(0xFFF49000),
                            modifier = Modifier.size(48.dp)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            "ÌòÑÏû¨ ÏúÑÏπòÎ•º Ï∞æÍ≥† ÏûàÏäµÎãàÎã§...",
                            style = MaterialTheme.typography.bodyLarge,
                            color = Color(0xFF757575)
                        )
                    }
                }
            } else {
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .weight(1f)
                        .padding(16.dp)
                        .shadow(4.dp, RoundedCornerShape(16.dp)),
                    colors = CardDefaults.cardColors(containerColor = Color.White),
                    shape = RoundedCornerShape(16.dp)
                ) {
                    GoogleMap(
                        modifier = Modifier.fillMaxSize(),
                        cameraPositionState = cameraPositionState,
                        onMapLoaded = {
                            isMapReady.value = true
                            // ÏßÄÎèÑÍ∞Ä Î°úÎìúÎêú ÌõÑÏóê ÏïÑÏù¥ÏΩò ÏÑ§Ï†ï
                            try {
                                val homeBitmap = BitmapFactory.decodeResource(context.resources, R.drawable.home)
                                homeIcon.value = BitmapDescriptorFactory.fromBitmap(homeBitmap)
                            } catch (e: Exception) {
                                homeIcon.value = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_RED)
                            }
                            userIcon.value = BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE)

                            // ÏÇ¨Ïö©Ïûê ÏúÑÏπòÍ∞Ä ÏûàÏúºÎ©¥ Ïπ¥Î©îÎùº Ïù¥Îèô
                            userLatLng.value?.let { userLocation ->
                                updateCameraToShowBothLocations(cameraPositionState, userLocation, homeLatLng.value)
                            }
                        }
                    ) {
                        // Ïßë ÎßàÏª§
                        if (homeIcon.value != null) {
                            Marker(
                                state = homeMarkerState,
                                title = "Ïö∞Î¶¨ Ïßë",
                                snippet = "Ïßë Ï£ºÏÜå: $homeAddress",
                                icon = homeIcon.value,
                                onClick = { marker ->
                                    // Ïßë ÎßàÏª§ ÌÅ¥Î¶≠ Ïãú Í∏∏Ï∞æÍ∏∞ ÏãúÏûë
                                    userLatLng.value?.let { userLocation ->
                                        openGoogleMapsNavigation(
                                            context = context,
                                            startLat = userLocation.latitude,
                                            startLng = userLocation.longitude,
                                            endLat = homeLatLng.value.latitude,
                                            endLng = homeLatLng.value.longitude,
                                            destinationName = "Ïßë"
                                        )
                                    } ?: run {
                                        Toast.makeText(context, "ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                                    }
                                    true
                                }
                            )
                        } else {
                            // ÏïÑÏù¥ÏΩò Î°úÎî© Ï§ëÏùº ÎïåÎäî Í∏∞Î≥∏ ÎßàÏª§
                            Marker(
                                state = homeMarkerState,
                                title = "Ïö∞Î¶¨ Ïßë",
                                snippet = "Ïßë Ï£ºÏÜå: $homeAddress",
                                onClick = { marker ->
                                    userLatLng.value?.let { userLocation ->
                                        openGoogleMapsNavigation(
                                            context = context,
                                            startLat = userLocation.latitude,
                                            startLng = userLocation.longitude,
                                            endLat = homeLatLng.value.latitude,
                                            endLng = homeLatLng.value.longitude,
                                            destinationName = "Ïßë"
                                        )
                                    } ?: run {
                                        Toast.makeText(context, "ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                                    }
                                    true
                                }
                            )
                        }

                        // ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§
                        userMarkerState.value?.let { markerState ->
                            if (userIcon.value != null) {
                                Marker(
                                    state = markerState,
                                    title = "ÌòÑÏû¨ ÏúÑÏπò",
                                    snippet = "Ïó¨Í∏∞Ïóê Í≥ÑÏã≠ÎãàÎã§",
                                    icon = userIcon.value
                                )
                            } else {
                                Marker(
                                    state = markerState,
                                    title = "ÌòÑÏû¨ ÏúÑÏπò",
                                    snippet = "Ïó¨Í∏∞Ïóê Í≥ÑÏã≠ÎãàÎã§"
                                )
                            }
                        }
                    }
                }
            }

            // ÌïòÎã® Î≤ÑÌäº ÏòÅÏó≠
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .shadow(4.dp, RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)
            ) {
                Column(
                    modifier = Modifier.padding(20.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // Íµ¨Í∏Ä ÎßµÏúºÎ°ú Í∏∏Ï∞æÍ∏∞ Î≤ÑÌäº
                    Button(
                        onClick = {
                            userLatLng.value?.let { userLocation ->
                                openGoogleMapsNavigation(
                                    context = context,
                                    startLat = userLocation.latitude,
                                    startLng = userLocation.longitude,
                                    endLat = homeLatLng.value.latitude,
                                    endLng = homeLatLng.value.longitude,
                                    destinationName = "Ïßë"
                                )
                            } ?: run {
                                Toast.makeText(context, "ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
                            }
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = Color(0xFFF49000)
                        ),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Icon(
                            Icons.Default.Navigation,
                            contentDescription = "Í∏∏Ï∞æÍ∏∞",
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(
                            "Íµ¨Í∏Ä ÎßµÏúºÎ°ú ÏßëÍπåÏßÄ Í∏∏Ï∞æÍ∏∞",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            fontSize = 18.sp
                        )
                    }



                    // Í∏¥Í∏â Ïó∞ÎùΩ Î≤ÑÌäº
                    OutlinedButton(
                        onClick = {
                            val phoneNumber = "010-1234-5678" // Î≥¥Ìò∏Ïûê Î≤àÌò∏
                            val intent = Intent(Intent.ACTION_CALL).apply {
                                data = Uri.parse("tel:$phoneNumber")
                            }
                            if (ContextCompat.checkSelfPermission(context, Manifest.permission.CALL_PHONE)
                                == PackageManager.PERMISSION_GRANTED) {
                                context.startActivity(intent)
                            } else {
                                Toast.makeText(context, "Ï†ÑÌôî Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
                            }
                        },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        border = ButtonDefaults.outlinedButtonBorder.copy(
                            width = 2.dp,
                            brush = Brush.horizontalGradient(
                                colors = listOf(Color(0xFFE53E3E), Color(0xFFFF6B6B))
                            )
                        ),
                        shape = RoundedCornerShape(16.dp)
                    ) {
                        Icon(
                            Icons.Default.Phone,
                            contentDescription = "Í∏¥Í∏â Ïó∞ÎùΩ",
                            tint = Color(0xFFE53E3E),
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(
                            "Î≥¥Ìò∏ÏûêÏóêÍ≤å Ï†ÑÌôîÌïòÍ∏∞",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFFE53E3E),
                            fontSize = 18.sp
                        )
                    }
                }
            }
        }
    }
}

/**
 * ÏÇ¨Ïö©ÏûêÏùò ÌòÑÏû¨ ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò§Îäî Ìï®Ïàò
 */
private fun getCurrentUserLocation(
    fusedLocationClient: FusedLocationProviderClient,
    context: Context,
    onLocationReceived: (Location) -> Unit
) {
    if (ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED ||
        ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_COARSE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    ) {
        fusedLocationClient.lastLocation
            .addOnSuccessListener { location: Location? ->
                location?.let {
                    onLocationReceived(it)
                    Log.d("UserLocation", "ÏÇ¨Ïö©Ïûê ÏúÑÏπò: ${it.latitude}, ${it.longitude}")
                } ?: run {
                    Log.w("UserLocation", "ÏúÑÏπòÎ•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                }
            }
            .addOnFailureListener { exception ->
                Log.e("UserLocation", "ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®", exception)
            }
    }
}

/**
 * Íµ¨Í∏Ä Îßµ Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ
 */
fun openGoogleMapsNavigation(
    context: Context,
    startLat: Double,
    startLng: Double,
    endLat: Double,
    endLng: Double,
    destinationName: String = "Î™©Ï†ÅÏßÄ"
) {
    try {
        val uri = Uri.parse(
            "https://www.google.com/maps/dir/?api=1" +
                    "&origin=$startLat,$startLng" +
                    "&destination=$endLat,$endLng" +
                    "&travelmode=walking"  // Í±∏Ïñ¥ÏÑú Ïù¥Îèô
        )

        val intent = Intent(Intent.ACTION_VIEW, uri).apply {
            setPackage("com.google.android.apps.maps")
        }

        if (intent.resolveActivity(context.packageManager) != null) {
            context.startActivity(intent)
            Log.d("Navigation", "Google MapsÎ°ú Í∏∏Ï∞æÍ∏∞ ÏãúÏûë: $destinationName")
        } else {
            // Íµ¨Í∏Ä ÎßµÏù¥ ÏóÜÏúºÎ©¥ Î∏åÎùºÏö∞Ï†ÄÎ°ú Ïó¥Í∏∞
            val browserIntent = Intent(
                Intent.ACTION_VIEW,
                Uri.parse("https://www.google.com/maps/dir/$startLat,$startLng/$endLat,$endLng")
            )
            context.startActivity(browserIntent)
            Toast.makeText(context, "ÏõπÏóêÏÑú Í∏∏Ï∞æÍ∏∞Î•º ÏãúÏûëÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show()
        }
    } catch (e: Exception) {
        Log.e("Navigation", "Í∏∏Ï∞æÍ∏∞ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù", e)
        Toast.makeText(context, "Í∏∏Ï∞æÍ∏∞Î•º Ïã§ÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
    }
}

/**
 * Ïπ¥Î©îÎùºÎ•º Îëê ÏúÑÏπòÎ•º Î™®Îëê Ìè¨Ìï®ÌïòÎèÑÎ°ù Ïù¥ÎèôÌïòÎäî Ìï®Ïàò
 */
fun updateCameraToShowBothLocations(
    cameraPositionState: CameraPositionState,
    userLocation: LatLng,
    homeLocation: LatLng
) {
    try {
        val bounds = LatLngBounds.builder()
            .include(userLocation)
            .include(homeLocation)
            .build()

        // Ìå®Îî©ÏùÑ Ï∂îÍ∞ÄÌïòÏó¨ ÎßàÏª§Îì§Ïù¥ ÌôîÎ©¥ Í∞ÄÏû•ÏûêÎ¶¨Ïóê Î∂ôÏßÄ ÏïäÎèÑÎ°ù Ìï®
        val cameraUpdate = CameraUpdateFactory.newLatLngBounds(bounds, 200)
        cameraPositionState.move(cameraUpdate)
    } catch (e: Exception) {
        Log.e("CameraUpdate", "Ïπ¥Î©îÎùº Ïù¥Îèô Ï§ë Ïò§Î•ò Î∞úÏÉù", e)
        // Ïã§Ìå® Ïãú Í∏∞Î≥∏ ÏúÑÏπòÎ°ú Ïù¥Îèô
        try {
            cameraPositionState.move(CameraUpdateFactory.newLatLngZoom(userLocation, 15f))
        } catch (e2: Exception) {
            Log.e("CameraUpdate", "Í∏∞Î≥∏ Ïπ¥Î©îÎùº Ïù¥ÎèôÎèÑ Ïã§Ìå®", e2)
        }
    }
}